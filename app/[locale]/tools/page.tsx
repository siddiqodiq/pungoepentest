"use client";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { Badge } from "@/components/ui/badge";
import { useState } from "react";
import { tools, Tool } from "@/lib/tools";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Command, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem } from "@/components/ui/command";

export default function ToolsPage() {
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [searchQuery, setSearchQuery] = useState("");

  // State untuk pop-up dan tool yang dipilih
  const [isToolModalOpen, setIsToolModalOpen] = useState(false);
  const [selectedTool, setSelectedTool] = useState<Tool | null>(null);
  const [domain, setDomain] = useState("");
  const [toolOutput, setToolOutput] = useState("");
  const [error, setError] = useState("");

  // Filter tools berdasarkan kategori dan pencarian
  const filteredTools = selectedCategory === "all"
    ? tools.filter((tool) => tool.name.toLowerCase().includes(searchQuery.toLowerCase()))
    : tools.filter((tool) => tool.category === selectedCategory && tool.name.toLowerCase().includes(searchQuery.toLowerCase()));

  // Fungsi untuk menangani klik tombol tool
  const handleToolClick = (tool: Tool) => {
    setSelectedTool(tool); // Menyimpan tool yang dipilih
    setIsToolModalOpen(true); // Membuka pop-up
  };

  // Fungsi untuk menjalankan tool
  const runTool = async () => {
    if (!selectedTool || !domain) return;

    let endpoint = "";
    if (selectedTool.name === "Subdomain Finder") {
      endpoint = "/api/scan";
    }

    try {
      const response = await fetch(`http://localhost:5000${endpoint}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ domain }),
      });

      const data = await response.json();
      if (response.ok) {
        setToolOutput(data.output); // Menyimpan output dari backend
        setError("");
      } else {
        setError(data.error); // Menyimpan pesan error
        setToolOutput("");
      }
    } catch (err) {
      setError("Failed to connect to the server.");
      setToolOutput("");
    }
  };

  return (
    <div className="h-full p-8 space-y-6">
      <h1 className="text-3xl font-bold">Pungoe Pentest Plugins</h1>
      <p className="text-gray-600">Discover custom plugins for Pungoe Pentest that combine instructions, extra knowledge, and tools like terminal.</p>

      {/* Toggle Group for Categories and Show All */}
      <ToggleGroup
        type="single"
        value={selectedCategory}
        onValueChange={(value) => setSelectedCategory(value)}
        className="w-full"
      >
        <ToggleGroupItem value="all" aria-label="Show All">
          Show All
        </ToggleGroupItem>
        <ToggleGroupItem value="recon" aria-label="Toggle Recon">
          Recon
        </ToggleGroupItem>
        <ToggleGroupItem value="vulnerability" aria-label="Toggle Vulnerability Scanner">
          Vulnerability Scanner
        </ToggleGroupItem>
        <ToggleGroupItem value="exploit" aria-label="Toggle Exploit Tools">
          Exploit Tools
        </ToggleGroupItem>
        <ToggleGroupItem value="utils" aria-label="Toggle Utils">
          Utils
        </ToggleGroupItem>
      </ToggleGroup>

      {/* Search Input */}
      <div className="w-full">
        <Command className="rounded-lg border shadow-md">
          <CommandInput
            placeholder="Search tools..."
            value={searchQuery}
            onValueChange={setSearchQuery}
            className="h-10 w-full"
          />
          {searchQuery && (
            <CommandList>
              <CommandEmpty>No results found.</CommandEmpty>
              <CommandGroup heading="Tools">
                {filteredTools.map((tool) => (
                  <CommandItem key={tool.id} value={tool.name}>
                    <div className="flex items-center space-x-4">
                      <div>
                        <p className="font-medium">{tool.name}</p>
                        <p className="text-sm text-gray-500">{tool.description}</p>
                      </div>
                      <Badge variant="secondary">{tool.status}</Badge>
                    </div>
                  </CommandItem>
                ))}
              </CommandGroup>
            </CommandList>
          )}
        </Command>
      </div>

      {/* Display Tools Based on Selected Category or Show All */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredTools.map((tool) => (
          <Card key={tool.id}>
            <CardHeader>
              <CardTitle>{tool.name}</CardTitle>
              <CardDescription>{tool.description}</CardDescription>
            </CardHeader>
            <CardContent>
              <Badge variant="secondary">{tool.status}</Badge>
            </CardContent>
            <CardFooter>
              <Button onClick={() => handleToolClick(tool)}>
                {tool.category === "recon" && "Scan"}
                {tool.category === "exploit" && "Exploit"}
                {tool.category !== "recon" && tool.category !== "exploit" && "Run"}
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>

      {/* Pop-up Menu untuk Tool */}
      {isToolModalOpen && selectedTool && (
  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div className="bg-black p-6 rounded-lg w-1/3 border border-gray-700">
      <h2 className="text-xl font-bold mb-4 text-white">{selectedTool.name}</h2>
      <p className="text-white mb-4">{selectedTool.description}</p>

      {/* Input Domain menggunakan CommandInput */}
      <Command>
        <CommandInput
          placeholder="Enter domain (e.g., example.com)"
          value={domain}
          onValueChange={(value) => setDomain(value)}
          className=" text-white border-gray-700"
        />
      </Command>

      {/* Tombol Run */}
      <Button onClick={runTool} className="bg-gray-700 text-white hover:bg-gray-600 mt-4">
        Run
      </Button>

      {/* Menampilkan Output dengan ScrollArea */}
      {toolOutput && (
        <div className="mt-4">
          <h3 className="font-bold mb-2 text-white">Results:</h3>
          <ScrollArea className="h-64 bg-gray-800 rounded p-4"> {/* Tinggi diatur ke h-64 (16rem) */}
            <pre className="whitespace-pre-wrap text-white">{toolOutput}</pre>
          </ScrollArea>
        </div>
      )}

      {/* Menampilkan Error */}
      {error && (
        <div className="mt-4 p-4 bg-red-900 text-red-300 rounded">
          {error}
        </div>
      )}

      {/* Tombol Close */}
      <Button
        onClick={() => {
          setIsToolModalOpen(false);
          setToolOutput("");
          setError("");
        }}
        className="mt-4 bg-gray-700 text-white hover:bg-gray-600"
        variant="outline"
      >
        Close
      </Button>
    </div>
  </div>
)}
    </div>
  );
}